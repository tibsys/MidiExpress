
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000dbe  00000e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  00000e5e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00000eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b27  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002048  00000000  00000000  00007caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077b6  00000000  00000000  00009cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  000114b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027da  00000000  00000000  00011bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003adb  00000000  00000000  000143a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000580  00000000  00000000  00017e81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	be c0       	rjmp	.+380    	; 0x17e <__ctors_end>
   2:	00 00       	nop
   4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
   6:	00 00       	nop
   8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
   a:	00 00       	nop
   c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
  12:	00 00       	nop
  14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
  16:	00 00       	nop
  18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
  22:	00 00       	nop
  24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
  26:	00 00       	nop
  28:	07 c4       	rjmp	.+2062   	; 0x838 <__vector_10>
  2a:	00 00       	nop
  2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
  32:	00 00       	nop
  34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
  36:	00 00       	nop
  38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
  42:	00 00       	nop
  44:	b7 c0       	rjmp	.+366    	; 0x1b4 <__bad_interrupt>
  46:	00 00       	nop
  48:	b5 c0       	rjmp	.+362    	; 0x1b4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b3 c0       	rjmp	.+358    	; 0x1b4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b1 c0       	rjmp	.+354    	; 0x1b4 <__bad_interrupt>
  52:	00 00       	nop
  54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
  56:	00 00       	nop
  58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
  62:	00 00       	nop
  64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
  66:	00 00       	nop
  68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
  72:	00 00       	nop
  74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
  76:	00 00       	nop
  78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	99 c0       	rjmp	.+306    	; 0x1b4 <__bad_interrupt>
  82:	00 00       	nop
  84:	97 c0       	rjmp	.+302    	; 0x1b4 <__bad_interrupt>
  86:	00 00       	nop
  88:	95 c0       	rjmp	.+298    	; 0x1b4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	93 c0       	rjmp	.+294    	; 0x1b4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
  92:	00 00       	nop
  94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
  96:	00 00       	nop
  98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	85 c0       	rjmp	.+266    	; 0x1b4 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	34 03 4d 00 49 00 44 00 49 00 2d 00 55 00 53 00     4.M.I.D.I.-.U.S.
  bc:	42 00 20 00 65 00 78 00 70 00 72 00 65 00 73 00     B. .e.x.p.r.e.s.
  cc:	73 00 69 00 6f 00 6e 00 20 00 70 00 65 00 64 00     s.i.o.n. .p.e.d.
  dc:	61 00 6c 00 00 00                                   a.l...

000000e2 <ManufacturerString>:
  e2:	1e 03 54 00 72 00 69 00 73 00 74 00 61 00 6e 00     ..T.r.i.s.t.a.n.
  f2:	20 00 49 00 73 00 72 00 61 00 eb 00 6c 00 00 00      .I.s.r.a...l...

00000102 <LanguageString>:
 102:	04 03 09 04                                         ....

00000106 <ConfigurationDescriptor>:
 106:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
 116:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
 126:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 136:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 146:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
 156:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 166:	05 25 01 01 03                                      .%...

0000016b <DeviceDescriptor>:
 16b:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 17b:	00 01 00                                            ...

0000017e <__ctors_end>:
 17e:	11 24       	eor	r1, r1
 180:	1f be       	out	0x3f, r1	; 63
 182:	cf ef       	ldi	r28, 0xFF	; 255
 184:	da e0       	ldi	r29, 0x0A	; 10
 186:	de bf       	out	0x3e, r29	; 62
 188:	cd bf       	out	0x3d, r28	; 61

0000018a <__do_copy_data>:
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	a0 e0       	ldi	r26, 0x00	; 0
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	ee eb       	ldi	r30, 0xBE	; 190
 192:	fd e0       	ldi	r31, 0x0D	; 13
 194:	02 c0       	rjmp	.+4      	; 0x19a <__do_copy_data+0x10>
 196:	05 90       	lpm	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	ac 30       	cpi	r26, 0x0C	; 12
 19c:	b1 07       	cpc	r27, r17
 19e:	d9 f7       	brne	.-10     	; 0x196 <__do_copy_data+0xc>

000001a0 <__do_clear_bss>:
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	ac e0       	ldi	r26, 0x0C	; 12
 1a4:	b1 e0       	ldi	r27, 0x01	; 1
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <.do_clear_bss_start>

000001a8 <.do_clear_bss_loop>:
 1a8:	1d 92       	st	X+, r1

000001aa <.do_clear_bss_start>:
 1aa:	a9 31       	cpi	r26, 0x19	; 25
 1ac:	b2 07       	cpc	r27, r18
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <.do_clear_bss_loop>
 1b0:	26 d0       	rcall	.+76     	; 0x1fe <main>
 1b2:	03 c6       	rjmp	.+3078   	; 0xdba <_exit>

000001b4 <__bad_interrupt>:
 1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <LEDs_TurnOnLEDs.constprop.2>:
				PORTC &= ~LEDS_PORTC_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTB &= ~(LEDMask & LEDS_PORTB_LEDS);
 1b6:	28 98       	cbi	0x05, 0	; 5
				PORTD &= ~(LEDMask & LEDS_PORTD_LEDS);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	8b b9       	out	0x0b, r24	; 11
				PORTC |=  (LEDMask & LEDS_PORTC_LEDS);
 1bc:	88 b1       	in	r24, 0x08	; 8
 1be:	88 b9       	out	0x08, r24	; 8
			}
 1c0:	08 95       	ret

000001c2 <sendMIDI>:
        USB_USBTask();
    }
}

/** Checks for changes in the position of the board joystick, sending MIDI events to the host upon each change. */
void sendMIDI(uint8_t command, uint8_t channel, uint8_t data1, uint8_t data2) {
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <sendMIDI+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <sendMIDI+0x8>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
    MIDI_EventPacket_t event = (MIDI_EventPacket_t) {
 1ce:	98 2f       	mov	r25, r24
 1d0:	92 95       	swap	r25
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	99 83       	std	Y+1, r25	; 0x01
 1d6:	86 2b       	or	r24, r22
 1d8:	8a 83       	std	Y+2, r24	; 0x02
 1da:	4b 83       	std	Y+3, r20	; 0x03
 1dc:	2c 83       	std	Y+4, r18	; 0x04
        .Data1       = command | channel,
        .Data2       = data1,
        .Data3       = data2,
    };

    MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &event);
 1de:	be 01       	movw	r22, r28
 1e0:	6f 5f       	subi	r22, 0xFF	; 255
 1e2:	7f 4f       	sbci	r23, 0xFF	; 255
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	7c d5       	rcall	.+2808   	; 0xce2 <MIDI_Device_SendEventPacket>
    MIDI_Device_Flush(&Keyboard_MIDI_Interface);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	97 d5       	rcall	.+2862   	; 0xd1e <MIDI_Device_Flush>
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <main>:
int main() {
 1fe:	00 d0       	rcall	.+0      	; 0x200 <main+0x2>
 200:	00 d0       	rcall	.+0      	; 0x202 <main+0x4>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
    MCUSR &= ~_BV(WDRF);
 206:	84 b7       	in	r24, 0x34	; 52
 208:	87 7f       	andi	r24, 0xF7	; 247
 20a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	a8 95       	wdr
 212:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 216:	88 61       	ori	r24, 0x18	; 24
 218:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 21c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 220:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 22e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 232:	0f be       	out	0x3f, r0	; 63
				DDRB  |=  LEDS_PORTB_LEDS;
 234:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
 236:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
 238:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
 23a:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
 23c:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
 23e:	47 98       	cbi	0x08, 7	; 8
    USB_Init();
 240:	de d2       	rcall	.+1468   	; 0x7fe <USB_Init>
    LEDs_TurnOnLEDs(LEDS_LED1); // keep LED1 on until initialized
 242:	5a 9a       	sbi	0x0b, 2	; 11
 244:	b8 df       	rcall	.-144    	; 0x1b6 <LEDs_TurnOnLEDs.constprop.2>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 246:	78 94       	sei
    uint8_t keydown = 0;
 248:	f1 2c       	mov	r15, r1
    uint16_t debounce = 0;
 24a:	10 e0       	ldi	r17, 0x00	; 0
 24c:	00 e0       	ldi	r16, 0x00	; 0
        else if(!(BUTTONPIN & _BV(BUTTON)) != keydown) { // button state change
 24e:	ee 24       	eor	r14, r14
 250:	e3 94       	inc	r14
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	b8 2e       	mov	r11, r24
        if(debounce) debounce--;
 256:	01 15       	cp	r16, r1
 258:	11 05       	cpc	r17, r1
 25a:	79 f0       	breq	.+30     	; 0x27a <main+0x7c>
 25c:	01 50       	subi	r16, 0x01	; 1
 25e:	11 09       	sbc	r17, r1
        while(MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface,
 260:	be 01       	movw	r22, r28
 262:	6f 5f       	subi	r22, 0xFF	; 255
 264:	7f 4f       	sbci	r23, 0xFF	; 255
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	82 d5       	rcall	.+2820   	; 0xd70 <MIDI_Device_ReceiveEventPacket>
 26c:	81 11       	cpse	r24, r1
        MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 26e:	f8 cf       	rjmp	.-16     	; 0x260 <main+0x62>
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	91 e0       	ldi	r25, 0x01	; 1
        USB_USBTask();
 274:	6d d5       	rcall	.+2778   	; 0xd50 <MIDI_Device_USBTask>
 276:	04 d5       	rcall	.+2568   	; 0xc80 <USB_USBTask>
    while(1) {
 278:	ee cf       	rjmp	.-36     	; 0x256 <main+0x58>
        else if(!(BUTTONPIN & _BV(BUTTON)) != keydown) { // button state change
 27a:	89 b1       	in	r24, 0x09	; 9
 27c:	86 95       	lsr	r24
 27e:	86 95       	lsr	r24
 280:	8e 25       	eor	r24, r14
 282:	80 fb       	bst	r24, 0
 284:	cc 24       	eor	r12, r12
 286:	c0 f8       	bld	r12, 0
 288:	d1 2c       	mov	r13, r1
 28a:	fc 14       	cp	r15, r12
 28c:	1d 04       	cpc	r1, r13
 28e:	41 f3       	breq	.-48     	; 0x260 <main+0x62>
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
 290:	13 b8       	out	0x03, r1	; 3
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
 292:	b9 b8       	out	0x09, r11	; 9
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
 294:	16 b8       	out	0x06, r1	; 6
            if(keydown)
 296:	f1 10       	cpse	r15, r1
 298:	0e c0       	rjmp	.+28     	; 0x2b6 <main+0xb8>
                sendMIDI(MIDI_COMMAND_NOTE_ON, 1, 60, 50);
 29a:	22 e3       	ldi	r18, 0x32	; 50
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	4c e3       	ldi	r20, 0x3C	; 60
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 e9       	ldi	r24, 0x90	; 144
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	8b df       	rcall	.-234    	; 0x1c2 <sendMIDI>
            keydown = !keydown; // keydown to reflect current state
 2ac:	ff 24       	eor	r15, r15
 2ae:	f3 94       	inc	r15
            debounce = 10000;
 2b0:	00 e1       	ldi	r16, 0x10	; 16
 2b2:	17 e2       	ldi	r17, 0x27	; 39
 2b4:	d5 cf       	rjmp	.-86     	; 0x260 <main+0x62>
                sendMIDI(MIDI_COMMAND_NOTE_OFF, 1, 60, 0);
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	4c e3       	ldi	r20, 0x3C	; 60
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	7d df       	rcall	.-262    	; 0x1c2 <sendMIDI>
            keydown = !keydown; // keydown to reflect current state
 2c8:	f1 2c       	mov	r15, r1
 2ca:	f2 cf       	rjmp	.-28     	; 0x2b0 <main+0xb2>

000002cc <EVENT_USB_Device_Connect>:
				PORTB |=  (LEDMask & LEDS_PORTB_LEDS);
 2cc:	28 9a       	sbi	0x05, 0	; 5
				PORTD |=  (LEDMask & LEDS_PORTD_LEDS);
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	8b b9       	out	0x0b, r24	; 11
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
 2d2:	88 b1       	in	r24, 0x08	; 8
 2d4:	88 b9       	out	0x08, r24	; 8

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect() {
	LEDs_TurnOffLEDs(LEDS_LED1);
}
 2d6:	08 95       	ret

000002d8 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect() {
	LEDs_TurnOnLEDs(LEDS_LED1); // keep LED1 on until initialized
 2d8:	6e cf       	rjmp	.-292    	; 0x1b6 <LEDs_TurnOnLEDs.constprop.2>

000002da <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged() {
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	ea d4       	rcall	.+2516   	; 0xcb4 <MIDI_Device_ConfigureEndpoints>

    if(!ConfigSuccess) LEDs_TurnOnLEDs(LEDS_LED1);
 2e0:	81 11       	cpse	r24, r1
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <EVENT_USB_Device_ConfigurationChanged+0xc>
 2e4:	68 cf       	rjmp	.-304    	; 0x1b6 <LEDs_TurnOnLEDs.constprop.2>
}
 2e6:	08 95       	ret

000002e8 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest() {
	MIDI_Device_ProcessControlRequest(&Keyboard_MIDI_Interface);
}
 2e8:	08 95       	ret

000002ea <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 2ea:	29 2f       	mov	r18, r25
 2ec:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2ee:	22 30       	cpi	r18, 0x02	; 2
 2f0:	31 05       	cpc	r19, r1
 2f2:	11 f1       	breq	.+68     	; 0x338 <CALLBACK_USB_GetDescriptor+0x4e>
 2f4:	23 30       	cpi	r18, 0x03	; 3
 2f6:	31 05       	cpc	r19, r1
 2f8:	59 f0       	breq	.+22     	; 0x310 <CALLBACK_USB_GetDescriptor+0x26>
 2fa:	21 30       	cpi	r18, 0x01	; 1
 2fc:	31 05       	cpc	r19, r1
 2fe:	09 f1       	breq	.+66     	; 0x342 <CALLBACK_USB_GetDescriptor+0x58>
	uint16_t    Size    = NO_DESCRIPTOR;
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	20 e0       	ldi	r18, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 308:	fa 01       	movw	r30, r20
 30a:	31 83       	std	Z+1, r19	; 0x01
 30c:	20 83       	st	Z, r18
	return Size;
}
 30e:	08 95       	ret
			switch (DescriptorNumber)
 310:	99 27       	eor	r25, r25
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	91 05       	cpc	r25, r1
 316:	69 f0       	breq	.+26     	; 0x332 <CALLBACK_USB_GetDescriptor+0x48>
 318:	00 97       	sbiw	r24, 0x00	; 0
 31a:	29 f0       	breq	.+10     	; 0x326 <CALLBACK_USB_GetDescriptor+0x3c>
 31c:	02 97       	sbiw	r24, 0x02	; 2
 31e:	81 f7       	brne	.-32     	; 0x300 <CALLBACK_USB_GetDescriptor+0x16>
					Size    = pgm_read_byte(&ProductString.Header.Size);
 320:	ec ea       	ldi	r30, 0xAC	; 172
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <CALLBACK_USB_GetDescriptor+0x40>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 326:	e2 e0       	ldi	r30, 0x02	; 2
 328:	f1 e0       	ldi	r31, 0x01	; 1
					Size    = pgm_read_byte(&ProductString.Header.Size);
 32a:	84 91       	lpm	r24, Z
 32c:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
 32e:	9f 01       	movw	r18, r30
					break;
 330:	eb cf       	rjmp	.-42     	; 0x308 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 332:	e2 ee       	ldi	r30, 0xE2	; 226
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	f9 cf       	rjmp	.-14     	; 0x32a <CALLBACK_USB_GetDescriptor+0x40>
			Size    = sizeof(USB_Descriptor_Configuration_t);
 338:	85 e6       	ldi	r24, 0x65	; 101
 33a:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
 33c:	26 e0       	ldi	r18, 0x06	; 6
 33e:	31 e0       	ldi	r19, 0x01	; 1
 340:	e3 cf       	rjmp	.-58     	; 0x308 <CALLBACK_USB_GetDescriptor+0x1e>
			Size    = sizeof(USB_Descriptor_Device_t);
 342:	82 e1       	ldi	r24, 0x12	; 18
 344:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
 346:	2b e6       	ldi	r18, 0x6B	; 107
 348:	31 e0       	ldi	r19, 0x01	; 1
 34a:	de cf       	rjmp	.-68     	; 0x308 <CALLBACK_USB_GetDescriptor+0x1e>

0000034c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 34c:	af 92       	push	r10
 34e:	bf 92       	push	r11
 350:	cf 92       	push	r12
 352:	df 92       	push	r13
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	6c 01       	movw	r12, r24
 360:	eb 01       	movw	r28, r22
 362:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 364:	db d1       	rcall	.+950    	; 0x71c <Endpoint_WaitUntilReady>
 366:	f8 2e       	mov	r15, r24
 368:	81 11       	cpse	r24, r1
 36a:	24 c0       	rjmp	.+72     	; 0x3b4 <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
 36c:	01 15       	cp	r16, r1
 36e:	11 05       	cpc	r17, r1
 370:	39 f0       	breq	.+14     	; 0x380 <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
 372:	f8 01       	movw	r30, r16
 374:	80 81       	ld	r24, Z
 376:	91 81       	ldd	r25, Z+1	; 0x01
 378:	c8 1b       	sub	r28, r24
 37a:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 37c:	c8 0e       	add	r12, r24
 37e:	d9 1e       	adc	r13, r25
{
 380:	b1 2c       	mov	r11, r1
 382:	a1 2c       	mov	r10, r1
	}

	while (Length)
 384:	20 97       	sbiw	r28, 0x00	; 0
 386:	b1 f0       	breq	.+44     	; 0x3b4 <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 388:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 38c:	85 fd       	sbrc	r24, 5
 38e:	22 c0       	rjmp	.+68     	; 0x3d4 <Endpoint_Write_Stream_LE+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 390:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 394:	8e 77       	andi	r24, 0x7E	; 126
 396:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 39a:	72 d4       	rcall	.+2276   	; 0xc80 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 39c:	01 15       	cp	r16, r1
 39e:	11 05       	cpc	r17, r1
 3a0:	a1 f0       	breq	.+40     	; 0x3ca <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
 3a2:	f8 01       	movw	r30, r16
 3a4:	80 81       	ld	r24, Z
 3a6:	91 81       	ldd	r25, Z+1	; 0x01
 3a8:	a8 0e       	add	r10, r24
 3aa:	b9 1e       	adc	r11, r25
 3ac:	b1 82       	std	Z+1, r11	; 0x01
 3ae:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 3b4:	8f 2d       	mov	r24, r15
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	df 90       	pop	r13
 3c2:	cf 90       	pop	r12
 3c4:	bf 90       	pop	r11
 3c6:	af 90       	pop	r10
			if ((ErrorCode = Endpoint_WaitUntilReady()))
 3c8:	08 95       	ret
 3ca:	a8 d1       	rcall	.+848    	; 0x71c <Endpoint_WaitUntilReady>
 3cc:	88 23       	and	r24, r24
 3ce:	d1 f2       	breq	.-76     	; 0x384 <Endpoint_Write_Stream_LE+0x38>
 3d0:	f8 2e       	mov	r15, r24
 3d2:	f0 cf       	rjmp	.-32     	; 0x3b4 <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
 3d4:	f6 01       	movw	r30, r12
 3d6:	81 91       	ld	r24, Z+
 3d8:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3da:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
 3de:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
 3e0:	ff ef       	ldi	r31, 0xFF	; 255
 3e2:	af 1a       	sub	r10, r31
 3e4:	bf 0a       	sbc	r11, r31
 3e6:	ce cf       	rjmp	.-100    	; 0x384 <Endpoint_Write_Stream_LE+0x38>

000003e8 <Endpoint_Read_Stream_LE>:
{
 3e8:	af 92       	push	r10
 3ea:	bf 92       	push	r11
 3ec:	cf 92       	push	r12
 3ee:	df 92       	push	r13
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	6c 01       	movw	r12, r24
 3fc:	eb 01       	movw	r28, r22
 3fe:	8a 01       	movw	r16, r20
	if ((ErrorCode = Endpoint_WaitUntilReady()))
 400:	8d d1       	rcall	.+794    	; 0x71c <Endpoint_WaitUntilReady>
 402:	f8 2e       	mov	r15, r24
 404:	81 11       	cpse	r24, r1
 406:	24 c0       	rjmp	.+72     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
	if (BytesProcessed != NULL)
 408:	01 15       	cp	r16, r1
 40a:	11 05       	cpc	r17, r1
 40c:	39 f0       	breq	.+14     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		Length -= *BytesProcessed;
 40e:	f8 01       	movw	r30, r16
 410:	80 81       	ld	r24, Z
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	c8 1b       	sub	r28, r24
 416:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 418:	c8 0e       	add	r12, r24
 41a:	d9 1e       	adc	r13, r25
{
 41c:	b1 2c       	mov	r11, r1
 41e:	a1 2c       	mov	r10, r1
	while (Length)
 420:	20 97       	sbiw	r28, 0x00	; 0
 422:	b1 f0       	breq	.+44     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
				return ((UEINTX & (1 << RWAL)) ? true : false);
 424:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (!(Endpoint_IsReadWriteAllowed()))
 428:	85 fd       	sbrc	r24, 5
 42a:	22 c0       	rjmp	.+68     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 42c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 430:	8b 77       	andi	r24, 0x7B	; 123
 432:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			USB_USBTask();
 436:	24 d4       	rcall	.+2120   	; 0xc80 <USB_USBTask>
			if (BytesProcessed != NULL)
 438:	01 15       	cp	r16, r1
 43a:	11 05       	cpc	r17, r1
 43c:	a1 f0       	breq	.+40     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
				*BytesProcessed += BytesInTransfer;
 43e:	f8 01       	movw	r30, r16
 440:	80 81       	ld	r24, Z
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	a8 0e       	add	r10, r24
 446:	b9 1e       	adc	r11, r25
 448:	b1 82       	std	Z+1, r11	; 0x01
 44a:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	f8 2e       	mov	r15, r24
}
 450:	8f 2d       	mov	r24, r15
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	ff 90       	pop	r15
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	bf 90       	pop	r11
 462:	af 90       	pop	r10
			if ((ErrorCode = Endpoint_WaitUntilReady()))
 464:	08 95       	ret
 466:	5a d1       	rcall	.+692    	; 0x71c <Endpoint_WaitUntilReady>
 468:	88 23       	and	r24, r24
 46a:	d1 f2       	breq	.-76     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 46c:	f8 2e       	mov	r15, r24
 46e:	f0 cf       	rjmp	.-32     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
				return UEDATX;
 470:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			TEMPLATE_TRANSFER_BYTE(DataStream);
 474:	f6 01       	movw	r30, r12
 476:	81 93       	st	Z+, r24
 478:	6f 01       	movw	r12, r30
			Length--;
 47a:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
 47c:	ff ef       	ldi	r31, 0xFF	; 255
 47e:	af 1a       	sub	r10, r31
 480:	bf 0a       	sbc	r11, r31
 482:	ce cf       	rjmp	.-100    	; 0x420 <__FUSE_REGION_LENGTH__+0x20>

00000484 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 484:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 486:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest+0x6>
 48a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <USB_ControlRequest+0x7>
 48e:	86 17       	cp	r24, r22
 490:	97 07       	cpc	r25, r23
 492:	a0 f0       	brcs	.+40     	; 0x4bc <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 494:	61 15       	cp	r22, r1
 496:	71 05       	cpc	r23, r1
 498:	29 f4       	brne	.+10     	; 0x4a4 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 49a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 49e:	9e 77       	andi	r25, 0x7E	; 126
 4a0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4a4:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4a6:	61 15       	cp	r22, r1
 4a8:	71 05       	cpc	r23, r1
 4aa:	51 f4       	brne	.+20     	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0x3c>
 4ac:	91 11       	cpse	r25, r1
 4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 4b4:	82 ff       	sbrs	r24, 2
 4b6:	34 c0       	rjmp	.+104    	; 0x520 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret
 4bc:	bc 01       	movw	r22, r24
 4be:	f2 cf       	rjmp	.-28     	; 0x4a4 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4c4:	88 23       	and	r24, r24
 4c6:	c1 f1       	breq	.+112    	; 0x538 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4c8:	85 30       	cpi	r24, 0x05	; 5
 4ca:	c1 f1       	breq	.+112    	; 0x53c <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
 4d0:	83 fd       	sbrc	r24, 3
 4d2:	30 c0       	rjmp	.+96     	; 0x534 <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
 4d8:	82 fd       	sbrc	r24, 2
 4da:	ea cf       	rjmp	.-44     	; 0x4b0 <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
 4e0:	80 ff       	sbrs	r24, 0
 4e2:	e1 cf       	rjmp	.-62     	; 0x4a6 <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 4e4:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 4e8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 4ec:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4ee:	61 15       	cp	r22, r1
 4f0:	71 05       	cpc	r23, r1
 4f2:	19 f0       	breq	.+6      	; 0x4fa <Endpoint_Write_Control_Stream_LE+0x76>
 4f4:	28 30       	cpi	r18, 0x08	; 8
 4f6:	31 05       	cpc	r19, r1
 4f8:	58 f0       	brcs	.+22     	; 0x510 <Endpoint_Write_Control_Stream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	28 30       	cpi	r18, 0x08	; 8
 4fe:	31 05       	cpc	r19, r1
 500:	09 f0       	breq	.+2      	; 0x504 <Endpoint_Write_Control_Stream_LE+0x80>
 502:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 504:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 508:	2e 77       	andi	r18, 0x7E	; 126
 50a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 50e:	cb cf       	rjmp	.-106    	; 0x4a6 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 510:	81 91       	ld	r24, Z+
				UEDATX = Data;
 512:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
 516:	61 50       	subi	r22, 0x01	; 1
 518:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 51a:	2f 5f       	subi	r18, 0xFF	; 255
 51c:	3f 4f       	sbci	r19, 0xFF	; 255
 51e:	e7 cf       	rjmp	.-50     	; 0x4ee <Endpoint_Write_Control_Stream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 520:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 524:	88 23       	and	r24, r24
 526:	41 f0       	breq	.+16     	; 0x538 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 528:	85 30       	cpi	r24, 0x05	; 5
 52a:	41 f0       	breq	.+16     	; 0x53c <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 52c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
 530:	83 ff       	sbrs	r24, 3
 532:	be cf       	rjmp	.-132    	; 0x4b0 <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
 534:	81 e0       	ldi	r24, 0x01	; 1
}
 536:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	08 95       	ret

00000540 <Endpoint_Write_Control_PStream_LE>:
{
 540:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
 542:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest+0x6>
 546:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <USB_ControlRequest+0x7>
 54a:	86 17       	cp	r24, r22
 54c:	97 07       	cpc	r25, r23
 54e:	a0 f0       	brcs	.+40     	; 0x578 <Endpoint_Write_Control_PStream_LE+0x38>
	else if (!(Length))
 550:	61 15       	cp	r22, r1
 552:	71 05       	cpc	r23, r1
 554:	29 f4       	brne	.+10     	; 0x560 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 556:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 55a:	8e 77       	andi	r24, 0x7E	; 126
 55c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 560:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
 562:	61 15       	cp	r22, r1
 564:	71 05       	cpc	r23, r1
 566:	51 f4       	brne	.+20     	; 0x57c <Endpoint_Write_Control_PStream_LE+0x3c>
 568:	91 11       	cpse	r25, r1
 56a:	08 c0       	rjmp	.+16     	; 0x57c <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 56c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
 570:	82 ff       	sbrs	r24, 2
 572:	35 c0       	rjmp	.+106    	; 0x5de <Endpoint_Write_Control_PStream_LE+0x9e>
	return ENDPOINT_RWCSTREAM_NoError;
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	08 95       	ret
 578:	bc 01       	movw	r22, r24
 57a:	f2 cf       	rjmp	.-28     	; 0x560 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 57c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 580:	88 23       	and	r24, r24
 582:	c9 f1       	breq	.+114    	; 0x5f6 <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 584:	85 30       	cpi	r24, 0x05	; 5
 586:	c9 f1       	breq	.+114    	; 0x5fa <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
 58c:	83 fd       	sbrc	r24, 3
 58e:	31 c0       	rjmp	.+98     	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 590:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
 594:	82 fd       	sbrc	r24, 2
 596:	ea cf       	rjmp	.-44     	; 0x56c <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 598:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
 59c:	80 ff       	sbrs	r24, 0
 59e:	e1 cf       	rjmp	.-62     	; 0x562 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 5a0:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 5a4:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 5a8:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 5aa:	61 15       	cp	r22, r1
 5ac:	71 05       	cpc	r23, r1
 5ae:	19 f0       	breq	.+6      	; 0x5b6 <Endpoint_Write_Control_PStream_LE+0x76>
 5b0:	28 30       	cpi	r18, 0x08	; 8
 5b2:	31 05       	cpc	r19, r1
 5b4:	58 f0       	brcs	.+22     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	28 30       	cpi	r18, 0x08	; 8
 5ba:	31 05       	cpc	r19, r1
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <Endpoint_Write_Control_PStream_LE+0x80>
 5be:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5c4:	8e 77       	andi	r24, 0x7E	; 126
 5c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5ca:	cb cf       	rjmp	.-106    	; 0x562 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5cc:	84 91       	lpm	r24, Z
				UEDATX = Data;
 5ce:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 5d2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 5d4:	61 50       	subi	r22, 0x01	; 1
 5d6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 5d8:	2f 5f       	subi	r18, 0xFF	; 255
 5da:	3f 4f       	sbci	r19, 0xFF	; 255
 5dc:	e6 cf       	rjmp	.-52     	; 0x5aa <Endpoint_Write_Control_PStream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5e2:	88 23       	and	r24, r24
 5e4:	41 f0       	breq	.+16     	; 0x5f6 <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5e6:	85 30       	cpi	r24, 0x05	; 5
 5e8:	41 f0       	breq	.+16     	; 0x5fa <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
 5ee:	83 ff       	sbrs	r24, 3
 5f0:	bd cf       	rjmp	.-134    	; 0x56c <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
}
 5f4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5fa:	83 e0       	ldi	r24, 0x03	; 3
 5fc:	08 95       	ret

000005fe <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 5fe:	98 2f       	mov	r25, r24
 600:	97 30       	cpi	r25, 0x07	; 7
 602:	28 f0       	brcs	.+10     	; 0x60e <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 604:	8f 70       	andi	r24, 0x0F	; 15
 606:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	08 95       	ret
 60e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
 612:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
 614:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
 616:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
 618:	98 17       	cp	r25, r24
 61a:	31 f0       	breq	.+12     	; 0x628 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
 61c:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
 620:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
 624:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
 628:	21 fd       	sbrc	r18, 1
 62a:	02 c0       	rjmp	.+4      	; 0x630 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 62c:	9f 5f       	subi	r25, 0xFF	; 255
 62e:	e8 cf       	rjmp	.-48     	; 0x600 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 630:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 634:	3e 7f       	andi	r19, 0xFE	; 254
 636:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
 63a:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 63e:	3d 7f       	andi	r19, 0xFD	; 253
 640:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
 644:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 648:	31 60       	ori	r19, 0x01	; 1
 64a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
 64e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
 652:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
 656:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 65a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
 65e:	27 fd       	sbrc	r18, 7
 660:	e5 cf       	rjmp	.-54     	; 0x62c <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
 662:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
 664:	08 95       	ret

00000666 <Endpoint_ConfigureEndpointTable>:
{
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	06 2f       	mov	r16, r22
	for (uint8_t i = 0; i < Entries; i++)
 670:	ec 01       	movw	r28, r24
 672:	10 e0       	ldi	r17, 0x00	; 0
 674:	10 13       	cpse	r17, r16
 676:	02 c0       	rjmp	.+4      	; 0x67c <Endpoint_ConfigureEndpointTable+0x16>
	return true;
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0b c0       	rjmp	.+22     	; 0x692 <Endpoint_ConfigureEndpointTable+0x2c>
		if (!(Table[i].Address))
 67c:	98 81       	ld	r25, Y
 67e:	91 11       	cpse	r25, r1
 680:	03 c0       	rjmp	.+6      	; 0x688 <Endpoint_ConfigureEndpointTable+0x22>
	for (uint8_t i = 0; i < Entries; i++)
 682:	1f 5f       	subi	r17, 0xFF	; 255
 684:	25 96       	adiw	r28, 0x05	; 5
 686:	f6 cf       	rjmp	.-20     	; 0x674 <Endpoint_ConfigureEndpointTable+0xe>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 688:	89 2f       	mov	r24, r25
 68a:	8f 70       	andi	r24, 0x0F	; 15
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 68c:	87 30       	cpi	r24, 0x07	; 7
 68e:	30 f0       	brcs	.+12     	; 0x69c <Endpoint_ConfigureEndpointTable+0x36>
		  return false;
 690:	80 e0       	ldi	r24, 0x00	; 0
}
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	08 95       	ret
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
 69c:	2c 81       	ldd	r18, Y+4	; 0x04
 69e:	42 e0       	ldi	r20, 0x02	; 2
 6a0:	22 30       	cpi	r18, 0x02	; 2
 6a2:	08 f0       	brcs	.+2      	; 0x6a6 <Endpoint_ConfigureEndpointTable+0x40>
 6a4:	46 e0       	ldi	r20, 0x06	; 6
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 6a6:	e9 81       	ldd	r30, Y+1	; 0x01
 6a8:	fa 81       	ldd	r31, Y+2	; 0x02
				uint16_t CheckBytes = 8;
 6aa:	68 e0       	ldi	r22, 0x08	; 8
 6ac:	70 e0       	ldi	r23, 0x00	; 0
				uint8_t  MaskVal    = 0;
 6ae:	20 e0       	ldi	r18, 0x00	; 0
				while (CheckBytes < Bytes)
 6b0:	6e 17       	cp	r22, r30
 6b2:	7f 07       	cpc	r23, r31
 6b4:	80 f0       	brcs	.+32     	; 0x6d6 <Endpoint_ConfigureEndpointTable+0x70>
				return (MaskVal << EPSIZE0);
 6b6:	22 95       	swap	r18
 6b8:	20 7f       	andi	r18, 0xF0	; 240
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
 6ba:	42 2b       	or	r20, r18
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 6bc:	6b 81       	ldd	r22, Y+3	; 0x03
 6be:	20 e4       	ldi	r18, 0x40	; 64
 6c0:	62 9f       	mul	r22, r18
 6c2:	b0 01       	movw	r22, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	99 1f       	adc	r25, r25
 6c8:	99 27       	eor	r25, r25
 6ca:	99 1f       	adc	r25, r25
 6cc:	69 2b       	or	r22, r25
				return Endpoint_ConfigureEndpoint_Prv(Number,
 6ce:	97 df       	rcall	.-210    	; 0x5fe <Endpoint_ConfigureEndpoint_Prv>
 6d0:	81 11       	cpse	r24, r1
 6d2:	d7 cf       	rjmp	.-82     	; 0x682 <Endpoint_ConfigureEndpointTable+0x1c>
 6d4:	dd cf       	rjmp	.-70     	; 0x690 <Endpoint_ConfigureEndpointTable+0x2a>
					MaskVal++;
 6d6:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	e9 cf       	rjmp	.-46     	; 0x6b0 <Endpoint_ConfigureEndpointTable+0x4a>

000006de <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 6de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest>
 6e2:	87 ff       	sbrs	r24, 7
 6e4:	13 c0       	rjmp	.+38     	; 0x70c <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 6ea:	82 ff       	sbrs	r24, 2
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f2:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 6fa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>
 6fe:	81 11       	cpse	r24, r1
 700:	f2 cf       	rjmp	.-28     	; 0x6e6 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
 702:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 704:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>
 708:	88 23       	and	r24, r24
 70a:	d9 f3       	breq	.-10     	; 0x702 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 70c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
 710:	80 ff       	sbrs	r24, 0
 712:	f8 cf       	rjmp	.-16     	; 0x704 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 714:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 718:	8e 77       	andi	r24, 0x7E	; 126
 71a:	ec cf       	rjmp	.-40     	; 0x6f4 <Endpoint_ClearStatusStage+0x16>

0000071c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 71c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 720:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 724:	95 e6       	ldi	r25, 0x65	; 101
 726:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 728:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 72c:	82 2f       	mov	r24, r18
 72e:	81 70       	andi	r24, 0x01	; 1
 730:	20 ff       	sbrs	r18, 0
 732:	06 c0       	rjmp	.+12     	; 0x740 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 734:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 738:	80 ff       	sbrs	r24, 0
 73a:	06 c0       	rjmp	.+12     	; 0x748 <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 740:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 744:	22 fd       	sbrc	r18, 2
 746:	1a c0       	rjmp	.+52     	; 0x77c <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 748:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 74c:	88 23       	and	r24, r24
 74e:	89 f0       	breq	.+34     	; 0x772 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 750:	85 30       	cpi	r24, 0x05	; 5
 752:	89 f0       	breq	.+34     	; 0x776 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 754:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 758:	85 fd       	sbrc	r24, 5
 75a:	0f c0       	rjmp	.+30     	; 0x77a <Endpoint_WaitUntilReady+0x5e>
 75c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 760:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 764:	42 17       	cp	r20, r18
 766:	53 07       	cpc	r21, r19
 768:	f9 f2       	breq	.-66     	; 0x728 <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 76a:	91 50       	subi	r25, 0x01	; 1
 76c:	e1 f6       	brne	.-72     	; 0x726 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 76e:	84 e0       	ldi	r24, 0x04	; 4
 770:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 772:	82 e0       	ldi	r24, 0x02	; 2
 774:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
 77a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
 77c:	08 95       	ret

0000077e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 786:	4b d0       	rcall	.+150    	; 0x81e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 788:	52 d0       	rcall	.+164    	; 0x82e <USB_INT_ClearAllInterrupts>
 78a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 78c:	d0 e0       	ldi	r29, 0x00	; 0
 78e:	88 81       	ld	r24, Y
 790:	8f 77       	andi	r24, 0x7F	; 127
 792:	88 83       	st	Y, r24
 794:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 796:	80 68       	ori	r24, 0x80	; 128
 798:	88 83       	st	Y, r24
 79a:	88 81       	ld	r24, Y
				USBCON &= ~(1 << FRZCLK);
 79c:	8f 7d       	andi	r24, 0xDF	; 223
 79e:	88 83       	st	Y, r24
 7a0:	19 bc       	out	0x29, r1	; 41
				PLLCSR = 0;
 7a2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7a6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	USB_Device_ConfigurationNumber  = 0;
 7aa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7ae:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7b2:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7b4:	10 e0       	ldi	r17, 0x00	; 0
 7b6:	f8 01       	movw	r30, r16
 7b8:	80 81       	ld	r24, Z
 7ba:	8b 7f       	andi	r24, 0xFB	; 251
 7bc:	80 83       	st	Z, r24
 7be:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7c0:	81 60       	ori	r24, 0x01	; 1
 7c2:	88 83       	st	Y, r24
 7c4:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	19 df       	rcall	.-462    	; 0x5fe <Endpoint_ConfigureEndpoint_Prv>
 7cc:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	8e 7f       	andi	r24, 0xFE	; 254
 7d4:	80 83       	st	Z, r24
 7d6:	e2 ee       	ldi	r30, 0xE2	; 226
						UDIEN  |= (1 << SUSPE);
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	81 60       	ori	r24, 0x01	; 1
 7de:	80 83       	st	Z, r24
 7e0:	80 81       	ld	r24, Z
						UDIEN  |= (1 << EORSTE);
 7e2:	88 60       	ori	r24, 0x08	; 8
 7e4:	80 83       	st	Z, r24
 7e6:	f8 01       	movw	r30, r16
				UDCON  &= ~(1 << DETACH);
 7e8:	80 81       	ld	r24, Z
 7ea:	8e 7f       	andi	r24, 0xFE	; 254
 7ec:	80 83       	st	Z, r24
 7ee:	88 81       	ld	r24, Y
				USBCON |=  (1 << OTGPADE);
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	88 83       	st	Y, r24
 7f4:	df 91       	pop	r29
}
 7f6:	cf 91       	pop	r28
 7f8:	1f 91       	pop	r17
 7fa:	0f 91       	pop	r16
 7fc:	08 95       	ret

000007fe <USB_Init>:
 7fe:	e8 ed       	ldi	r30, 0xD8	; 216
				USBCON &= ~(1 << OTGPADE);
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	8f 7e       	andi	r24, 0xEF	; 239
 806:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
 808:	e7 ed       	ldi	r30, 0xD7	; 215
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	81 60       	ori	r24, 0x01	; 1
 810:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
 812:	84 e0       	ldi	r24, 0x04	; 4
 814:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_IsInitialized>
	USB_ResetInterface();
 81c:	b0 cf       	rjmp	.-160    	; 0x77e <USB_ResetInterface>

0000081e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 81e:	e8 ed       	ldi	r30, 0xD8	; 216
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	8e 7f       	andi	r24, 0xFE	; 254
 826:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 828:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
 82c:	08 95       	ret

0000082e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 82e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 832:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
 836:	08 95       	ret

00000838 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	2f 93       	push	r18
 844:	3f 93       	push	r19
 846:	4f 93       	push	r20
 848:	5f 93       	push	r21
 84a:	6f 93       	push	r22
 84c:	7f 93       	push	r23
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 85a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 85e:	82 ff       	sbrs	r24, 2
 860:	0a c0       	rjmp	.+20     	; 0x876 <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
 862:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 866:	82 ff       	sbrs	r24, 2
 868:	06 c0       	rjmp	.+12     	; 0x876 <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
 86a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 86e:	8b 7f       	andi	r24, 0xFB	; 251
 870:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 874:	04 d2       	rcall	.+1032   	; 0xc7e <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
 876:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 87a:	80 ff       	sbrs	r24, 0
 87c:	18 c0       	rjmp	.+48     	; 0x8ae <__vector_10+0x76>
						return (USBCON & (1 << VBUSTE));
 87e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 882:	80 ff       	sbrs	r24, 0
 884:	14 c0       	rjmp	.+40     	; 0x8ae <__vector_10+0x76>
						USBINT &= ~(1 << VBUSTI);
 886:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 88a:	8e 7f       	andi	r24, 0xFE	; 254
 88c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 890:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 894:	80 ff       	sbrs	r24, 0
 896:	8c c0       	rjmp	.+280    	; 0x9b0 <__vector_10+0x178>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 898:	80 e1       	ldi	r24, 0x10	; 16
 89a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 89c:	82 e1       	ldi	r24, 0x12	; 18
 89e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8a0:	09 b4       	in	r0, 0x29	; 41
 8a2:	00 fe       	sbrs	r0, 0
 8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 8ac:	0f dd       	rcall	.-1506   	; 0x2cc <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
 8ae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8b2:	80 ff       	sbrs	r24, 0
 8b4:	18 c0       	rjmp	.+48     	; 0x8e6 <__vector_10+0xae>
						return (UDIEN  & (1 << SUSPE));
 8b6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8ba:	80 ff       	sbrs	r24, 0
 8bc:	14 c0       	rjmp	.+40     	; 0x8e6 <__vector_10+0xae>
						UDIEN  &= ~(1 << SUSPE);
 8be:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8c2:	8e 7f       	andi	r24, 0xFE	; 254
 8c4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
 8c8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8cc:	80 61       	ori	r24, 0x10	; 16
 8ce:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8d2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 8d6:	80 62       	ori	r24, 0x20	; 32
 8d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
 8dc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8de:	85 e0       	ldi	r24, 0x05	; 5
 8e0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 8e4:	cc d1       	rcall	.+920    	; 0xc7e <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
 8e6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 8ea:	84 ff       	sbrs	r24, 4
 8ec:	2a c0       	rjmp	.+84     	; 0x942 <__vector_10+0x10a>
						return (UDIEN  & (1 << WAKEUPE));
 8ee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8f2:	84 ff       	sbrs	r24, 4
 8f4:	26 c0       	rjmp	.+76     	; 0x942 <__vector_10+0x10a>
				PLLCSR = USB_PLL_PSC;
 8f6:	80 e1       	ldi	r24, 0x10	; 16
 8f8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8fa:	82 e1       	ldi	r24, 0x12	; 18
 8fc:	89 bd       	out	0x29, r24	; 41
				return ((PLLCSR & (1 << PLOCK)) ? true : false);
 8fe:	89 b5       	in	r24, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 900:	98 2f       	mov	r25, r24
 902:	91 70       	andi	r25, 0x01	; 1
 904:	80 ff       	sbrs	r24, 0
 906:	fb cf       	rjmp	.-10     	; 0x8fe <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 908:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 90c:	8f 7d       	andi	r24, 0xDF	; 223
 90e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
 912:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 916:	8f 7e       	andi	r24, 0xEF	; 239
 918:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
 91c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 920:	8f 7e       	andi	r24, 0xEF	; 239
 922:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
 926:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 92a:	81 60       	ori	r24, 0x01	; 1
 92c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 930:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 934:	88 23       	and	r24, r24
 936:	09 f4       	brne	.+2      	; 0x93a <__vector_10+0x102>
 938:	40 c0       	rjmp	.+128    	; 0x9ba <__vector_10+0x182>
		  USB_DeviceState = DEVICE_STATE_Configured;
 93a:	84 e0       	ldi	r24, 0x04	; 4
 93c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <USB_DeviceState>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 940:	9e d1       	rcall	.+828    	; 0xc7e <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
 942:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 946:	83 ff       	sbrs	r24, 3
 948:	22 c0       	rjmp	.+68     	; 0x98e <__vector_10+0x156>
						return (UDIEN  & (1 << EORSTE));
 94a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 94e:	83 ff       	sbrs	r24, 3
 950:	1e c0       	rjmp	.+60     	; 0x98e <__vector_10+0x156>
						UDINT  &= ~(1 << EORSTI);
 952:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 956:	87 7f       	andi	r24, 0xF7	; 247
 958:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 95c:	82 e0       	ldi	r24, 0x02	; 2
 95e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 962:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
						UDINT  &= ~(1 << SUSPI);
 966:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 96a:	8e 7f       	andi	r24, 0xFE	; 254
 96c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
 970:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 974:	8e 7f       	andi	r24, 0xFE	; 254
 976:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
 97a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 97e:	80 61       	ori	r24, 0x10	; 16
 980:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 984:	42 e0       	ldi	r20, 0x02	; 2
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 98a:	39 de       	rcall	.-910    	; 0x5fe <Endpoint_ConfigureEndpoint_Prv>
 98c:	78 d1       	rcall	.+752    	; 0xc7e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 98e:	ff 91       	pop	r31
 990:	ef 91       	pop	r30
 992:	bf 91       	pop	r27
 994:	af 91       	pop	r26
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	7f 91       	pop	r23
 99c:	6f 91       	pop	r22
 99e:	5f 91       	pop	r21
 9a0:	4f 91       	pop	r20
 9a2:	3f 91       	pop	r19
 9a4:	2f 91       	pop	r18
 9a6:	0f 90       	pop	r0
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	0f 90       	pop	r0
 9ac:	1f 90       	pop	r1
				PLLCSR = 0;
 9ae:	18 95       	reti
			USB_DeviceState = DEVICE_STATE_Unattached;
 9b0:	19 bc       	out	0x29, r1	; 41
 9b2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 9b6:	90 dc       	rcall	.-1760   	; 0x2d8 <EVENT_USB_Device_Disconnect>
 9b8:	7a cf       	rjmp	.-268    	; 0x8ae <__vector_10+0x76>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9ba:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 9be:	87 fd       	sbrc	r24, 7
 9c0:	93 e0       	ldi	r25, 0x03	; 3
 9c2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <USB_DeviceState>
 9c6:	bc cf       	rjmp	.-136    	; 0x940 <__vector_10+0x108>

000009c8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9c8:	1f 93       	push	r17
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
 9d2:	aa 97       	sbiw	r28, 0x2a	; 42
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	f8 94       	cli
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 9de:	81 e1       	ldi	r24, 0x11	; 17
 9e0:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9e2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9e6:	fc 01       	movw	r30, r24
 9e8:	21 93       	st	Z+, r18
 9ea:	cf 01       	movw	r24, r30
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9ec:	f1 e0       	ldi	r31, 0x01	; 1
 9ee:	89 31       	cpi	r24, 0x19	; 25
 9f0:	9f 07       	cpc	r25, r31
 9f2:	b9 f7       	brne	.-18     	; 0x9e2 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
 9f4:	79 dc       	rcall	.-1806   	; 0x2e8 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 9fa:	83 ff       	sbrs	r24, 3
 9fc:	11 c0       	rjmp	.+34     	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 a02:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x1>
 a06:	85 30       	cpi	r24, 0x05	; 5
 a08:	09 f4       	brne	.+2      	; 0xa0c <USB_Device_ProcessControlRequest+0x44>
 a0a:	c3 c0       	rjmp	.+390    	; 0xb92 <__stack+0x93>
 a0c:	08 f5       	brcc	.+66     	; 0xa50 <USB_Device_ProcessControlRequest+0x88>
 a0e:	81 30       	cpi	r24, 0x01	; 1
 a10:	09 f4       	brne	.+2      	; 0xa14 <USB_Device_ProcessControlRequest+0x4c>
 a12:	8c c0       	rjmp	.+280    	; 0xb2c <__stack+0x2d>
 a14:	88 23       	and	r24, r24
 a16:	09 f4       	brne	.+2      	; 0xa1a <USB_Device_ProcessControlRequest+0x52>
 a18:	61 c0       	rjmp	.+194    	; 0xadc <USB_Device_ProcessControlRequest+0x114>
 a1a:	83 30       	cpi	r24, 0x03	; 3
 a1c:	09 f4       	brne	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
 a1e:	86 c0       	rjmp	.+268    	; 0xb2c <__stack+0x2d>
 a20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a24:	83 ff       	sbrs	r24, 3
 a26:	0a c0       	rjmp	.+20     	; 0xa3c <USB_Device_ProcessControlRequest+0x74>
				UEINTX &= ~(1 << RXSTPI);
 a28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a2c:	87 7f       	andi	r24, 0xF7	; 247
 a2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
 a32:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a36:	80 62       	ori	r24, 0x20	; 32
 a38:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 a3c:	aa 96       	adiw	r28, 0x2a	; 42
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	f8 94       	cli
 a42:	de bf       	out	0x3e, r29	; 62
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	cd bf       	out	0x3d, r28	; 61
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	1f 91       	pop	r17
 a4e:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
 a50:	88 30       	cpi	r24, 0x08	; 8
 a52:	09 f4       	brne	.+2      	; 0xa56 <USB_Device_ProcessControlRequest+0x8e>
 a54:	d5 c0       	rjmp	.+426    	; 0xc00 <__stack+0x101>
 a56:	89 30       	cpi	r24, 0x09	; 9
 a58:	09 f4       	brne	.+2      	; 0xa5c <USB_Device_ProcessControlRequest+0x94>
 a5a:	df c0       	rjmp	.+446    	; 0xc1a <__stack+0x11b>
 a5c:	86 30       	cpi	r24, 0x06	; 6
 a5e:	01 f7       	brne	.-64     	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a60:	90 58       	subi	r25, 0x80	; 128
 a62:	92 30       	cpi	r25, 0x02	; 2
 a64:	e8 f6       	brcc	.-70     	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a66:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest+0x2>
 a6a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <USB_ControlRequest+0x3>
 a6e:	8c 3d       	cpi	r24, 0xDC	; 220
 a70:	23 e0       	ldi	r18, 0x03	; 3
 a72:	92 07       	cpc	r25, r18
 a74:	09 f0       	breq	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0xb0>
 a76:	af c0       	rjmp	.+350    	; 0xbd6 <__stack+0xd7>
	SignatureDescriptor.Header.Type = DTYPE_String;
 a78:	83 e0       	ldi	r24, 0x03	; 3
 a7a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a7c:	8a e2       	ldi	r24, 0x2A	; 42
 a7e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a80:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a82:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a84:	de 01       	movw	r26, r28
 a86:	13 96       	adiw	r26, 0x03	; 3
 a88:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a8a:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a8c:	51 e2       	ldi	r21, 0x21	; 33
 a8e:	e3 2f       	mov	r30, r19
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 a96:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 a98:	20 ff       	sbrs	r18, 0
 a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <USB_Device_ProcessControlRequest+0xda>
					{
						SerialByte >>= 4;
 a9c:	e2 95       	swap	r30
 a9e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 aa0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 aa2:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 aa4:	8e 2f       	mov	r24, r30
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	ea 30       	cpi	r30, 0x0A	; 10
 aaa:	08 f4       	brcc	.+2      	; 0xaae <USB_Device_ProcessControlRequest+0xe6>
 aac:	92 c0       	rjmp	.+292    	; 0xbd2 <__stack+0xd3>
 aae:	c7 96       	adiw	r24, 0x37	; 55
 ab0:	8d 93       	st	X+, r24
 ab2:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 ab4:	2f 5f       	subi	r18, 0xFF	; 255
 ab6:	24 31       	cpi	r18, 0x14	; 20
 ab8:	51 f7       	brne	.-44     	; 0xa8e <USB_Device_ProcessControlRequest+0xc6>
				SREG = GlobalIntState;
 aba:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
 abc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ac0:	87 7f       	andi	r24, 0xF7	; 247
 ac2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 ac6:	6a e2       	ldi	r22, 0x2A	; 42
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	ce 01       	movw	r24, r28
 acc:	01 96       	adiw	r24, 0x01	; 1
 ace:	da dc       	rcall	.-1612   	; 0x484 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ad0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ad4:	8b 77       	andi	r24, 0x7B	; 123
 ad6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ada:	a2 cf       	rjmp	.-188    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 adc:	90 38       	cpi	r25, 0x80	; 128
 ade:	99 f0       	breq	.+38     	; 0xb06 <__stack+0x7>
 ae0:	92 38       	cpi	r25, 0x82	; 130
 ae2:	09 f0       	breq	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0x11e>
 ae4:	9d cf       	rjmp	.-198    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ae6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x4>
 aea:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 aec:	87 30       	cpi	r24, 0x07	; 7
 aee:	08 f0       	brcs	.+2      	; 0xaf2 <USB_Device_ProcessControlRequest+0x12a>
 af0:	97 cf       	rjmp	.-210    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 af2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 af6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 afa:	85 fb       	bst	r24, 5
 afc:	88 27       	eor	r24, r24
 afe:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b00:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <__stack+0x13>
	uint8_t CurrentStatus = 0;
 b06:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
 b0a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <USB_Device_RemoteWakeupEnabled>
 b0e:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b10:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
 b12:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b16:	97 7f       	andi	r25, 0xF7	; 247
 b18:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b1c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 b20:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b28:	8e 77       	andi	r24, 0x7E	; 126
 b2a:	a5 c0       	rjmp	.+330    	; 0xc76 <__stack+0x177>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b2c:	99 23       	and	r25, r25
 b2e:	09 f4       	brne	.+2      	; 0xb32 <__stack+0x33>
 b30:	92 c0       	rjmp	.+292    	; 0xc56 <__stack+0x157>
 b32:	92 30       	cpi	r25, 0x02	; 2
 b34:	09 f0       	breq	.+2      	; 0xb38 <__stack+0x39>
 b36:	74 cf       	rjmp	.-280    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b38:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USB_ControlRequest+0x2>
 b3c:	91 11       	cpse	r25, r1
 b3e:	96 c0       	rjmp	.+300    	; 0xc6c <__stack+0x16d>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b40:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <USB_ControlRequest+0x4>
 b44:	9f 70       	andi	r25, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 b46:	2f ef       	ldi	r18, 0xFF	; 255
 b48:	29 0f       	add	r18, r25
 b4a:	26 30       	cpi	r18, 0x06	; 6
 b4c:	08 f0       	brcs	.+2      	; 0xb50 <__stack+0x51>
 b4e:	68 cf       	rjmp	.-304    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b50:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
 b54:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b58:	20 ff       	sbrs	r18, 0
 b5a:	88 c0       	rjmp	.+272    	; 0xc6c <__stack+0x16d>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b5c:	83 30       	cpi	r24, 0x03	; 3
 b5e:	31 f4       	brne	.+12     	; 0xb6c <__stack+0x6d>
				UECONX |= (1 << STALLRQ);
 b60:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b64:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
 b66:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b6a:	80 c0       	rjmp	.+256    	; 0xc6c <__stack+0x16d>
				UECONX |= (1 << STALLRQC);
 b6c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b70:	80 61       	ori	r24, 0x10	; 16
 b72:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b76:	21 e0       	ldi	r18, 0x01	; 1
 b78:	30 e0       	ldi	r19, 0x00	; 0
 b7a:	01 c0       	rjmp	.+2      	; 0xb7e <__stack+0x7f>
 b7c:	22 0f       	add	r18, r18
 b7e:	9a 95       	dec	r25
 b80:	ea f7       	brpl	.-6      	; 0xb7c <__stack+0x7d>
 b82:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 b86:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
 b8a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b8e:	88 60       	ori	r24, 0x08	; 8
 b90:	ea cf       	rjmp	.-44     	; 0xb66 <__stack+0x67>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b92:	91 11       	cpse	r25, r1
 b94:	45 cf       	rjmp	.-374    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b96:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <USB_ControlRequest+0x2>
 b9a:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b9c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 ba0:	80 78       	andi	r24, 0x80	; 128
 ba2:	81 2b       	or	r24, r17
 ba4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
 ba8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bac:	87 7f       	andi	r24, 0xF7	; 247
 bae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
 bb2:	95 dd       	rcall	.-1238   	; 0x6de <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
 bb8:	80 ff       	sbrs	r24, 0
 bba:	fc cf       	rjmp	.-8      	; 0xbb4 <__stack+0xb5>
				UDADDR |= (1 << ADDEN);
 bbc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 bc0:	80 68       	ori	r24, 0x80	; 128
 bc2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 bc6:	82 e0       	ldi	r24, 0x02	; 2
 bc8:	11 11       	cpse	r17, r1
 bca:	83 e0       	ldi	r24, 0x03	; 3
 bcc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <USB_DeviceState>
 bd0:	27 cf       	rjmp	.-434    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bd2:	c0 96       	adiw	r24, 0x30	; 48
 bd4:	6d cf       	rjmp	.-294    	; 0xab0 <USB_Device_ProcessControlRequest+0xe8>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bd6:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <USB_ControlRequest+0x4>
 bda:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <USB_ControlRequest+0x5>
 bde:	ae 01       	movw	r20, r28
 be0:	4f 5f       	subi	r20, 0xFF	; 255
 be2:	5f 4f       	sbci	r21, 0xFF	; 255
 be4:	82 db       	rcall	.-2300   	; 0x2ea <CALLBACK_USB_GetDescriptor>
 be6:	bc 01       	movw	r22, r24
 be8:	89 2b       	or	r24, r25
 bea:	09 f4       	brne	.+2      	; 0xbee <__stack+0xef>
 bec:	19 cf       	rjmp	.-462    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
				UEINTX &= ~(1 << RXSTPI);
 bee:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bf2:	97 7f       	andi	r25, 0xF7	; 247
 bf4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bf8:	89 81       	ldd	r24, Y+1	; 0x01
 bfa:	9a 81       	ldd	r25, Y+2	; 0x02
 bfc:	a1 dc       	rcall	.-1726   	; 0x540 <Endpoint_Write_Control_PStream_LE>
 bfe:	68 cf       	rjmp	.-304    	; 0xad0 <USB_Device_ProcessControlRequest+0x108>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c00:	90 38       	cpi	r25, 0x80	; 128
 c02:	09 f0       	breq	.+2      	; 0xc06 <__stack+0x107>
 c04:	0d cf       	rjmp	.-486    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
 c06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c0a:	87 7f       	andi	r24, 0xF7	; 247
 c0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c10:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
				UEDATX = Data;
 c14:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 c18:	85 cf       	rjmp	.-246    	; 0xb24 <__stack+0x25>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c1a:	91 11       	cpse	r25, r1
 c1c:	01 cf       	rjmp	.-510    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c1e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USB_ControlRequest+0x2>
 c22:	92 30       	cpi	r25, 0x02	; 2
 c24:	08 f0       	brcs	.+2      	; 0xc28 <__stack+0x129>
 c26:	fc ce       	rjmp	.-520    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
				UEINTX &= ~(1 << RXSTPI);
 c28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c2c:	87 7f       	andi	r24, 0xF7	; 247
 c2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c32:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_end>
	Endpoint_ClearStatusStage();
 c36:	53 dd       	rcall	.-1370   	; 0x6de <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
 c38:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 c3c:	88 23       	and	r24, r24
 c3e:	11 f0       	breq	.+4      	; 0xc44 <__stack+0x145>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c40:	84 e0       	ldi	r24, 0x04	; 4
 c42:	05 c0       	rjmp	.+10     	; 0xc4e <__stack+0x14f>
				return (UDADDR & (1 << ADDEN));
 c44:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c48:	87 fd       	sbrc	r24, 7
 c4a:	fa cf       	rjmp	.-12     	; 0xc40 <__stack+0x141>
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
 c52:	43 db       	rcall	.-2426   	; 0x2da <EVENT_USB_Device_ConfigurationChanged>
 c54:	e5 ce       	rjmp	.-566    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c56:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USB_ControlRequest+0x2>
 c5a:	91 30       	cpi	r25, 0x01	; 1
 c5c:	09 f0       	breq	.+2      	; 0xc60 <__stack+0x161>
 c5e:	e0 ce       	rjmp	.-576    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c60:	91 e0       	ldi	r25, 0x01	; 1
 c62:	83 30       	cpi	r24, 0x03	; 3
 c64:	09 f0       	breq	.+2      	; 0xc68 <__stack+0x169>
 c66:	90 e0       	ldi	r25, 0x00	; 0
 c68:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c6c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
 c70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c74:	87 7f       	andi	r24, 0xF7	; 247
 c76:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c7a:	31 dd       	rcall	.-1438   	; 0x6de <Endpoint_ClearStatusStage>
 c7c:	d1 ce       	rjmp	.-606    	; 0xa20 <USB_Device_ProcessControlRequest+0x58>

00000c7e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c7e:	08 95       	ret

00000c80 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c80:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 c82:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>
 c86:	88 23       	and	r24, r24
 c88:	99 f0       	breq	.+38     	; 0xcb0 <USB_USBTask+0x30>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c8a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c8e:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c90:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 c94:	89 2f       	mov	r24, r25
 c96:	81 70       	andi	r24, 0x01	; 1
 c98:	90 fd       	sbrc	r25, 0
 c9a:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c9c:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c9e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ca2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 ca6:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 ca8:	8f de       	rcall	.-738    	; 0x9c8 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 caa:	cf 70       	andi	r28, 0x0F	; 15
 cac:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
 cb0:	cf 91       	pop	r28
 cb2:	08 95       	ret

00000cb4 <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 cb4:	cf 93       	push	r28
 cb6:	df 93       	push	r29
 cb8:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 cba:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 cbc:	82 e0       	ldi	r24, 0x02	; 2
 cbe:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 cc0:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 cc2:	61 e0       	ldi	r22, 0x01	; 1
 cc4:	ce 01       	movw	r24, r28
 cc6:	01 96       	adiw	r24, 0x01	; 1
 cc8:	ce dc       	rcall	.-1636   	; 0x666 <Endpoint_ConfigureEndpointTable>
 cca:	88 23       	and	r24, r24
 ccc:	31 f0       	breq	.+12     	; 0xcda <MIDI_Device_ConfigureEndpoints+0x26>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 cce:	61 e0       	ldi	r22, 0x01	; 1
 cd0:	ce 01       	movw	r24, r28
 cd2:	06 96       	adiw	r24, 0x06	; 6
	  return false;

	return true;
}
 cd4:	df 91       	pop	r29
	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 cd6:	cf 91       	pop	r28
 cd8:	c6 cc       	rjmp	.-1652   	; 0x666 <Endpoint_ConfigureEndpointTable>
}
 cda:	80 e0       	ldi	r24, 0x00	; 0
 cdc:	df 91       	pop	r29
 cde:	cf 91       	pop	r28
 ce0:	08 95       	ret

00000ce2 <MIDI_Device_SendEventPacket>:
	#endif
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
 ce2:	9b 01       	movw	r18, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 ce4:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <USB_DeviceState>
 ce8:	44 30       	cpi	r20, 0x04	; 4
 cea:	b9 f4       	brne	.+46     	; 0xd1a <MIDI_Device_SendEventPacket+0x38>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cec:	fc 01       	movw	r30, r24
 cee:	91 81       	ldd	r25, Z+1	; 0x01
 cf0:	9f 70       	andi	r25, 0x0F	; 15
 cf2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 cf6:	50 e0       	ldi	r21, 0x00	; 0
 cf8:	40 e0       	ldi	r20, 0x00	; 0
 cfa:	64 e0       	ldi	r22, 0x04	; 4
 cfc:	70 e0       	ldi	r23, 0x00	; 0
 cfe:	c9 01       	movw	r24, r18
 d00:	25 db       	rcall	.-2486   	; 0x34c <Endpoint_Write_Stream_LE>
 d02:	81 11       	cpse	r24, r1
 d04:	0b c0       	rjmp	.+22     	; 0xd1c <MIDI_Device_SendEventPacket+0x3a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d06:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 d0a:	95 fd       	sbrc	r25, 5
 d0c:	07 c0       	rjmp	.+14     	; 0xd1c <MIDI_Device_SendEventPacket+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d0e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d12:	9e 77       	andi	r25, 0x7E	; 126
 d14:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d18:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d1a:	82 e0       	ldi	r24, 0x02	; 2
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
}
 d1c:	08 95       	ret

00000d1e <MIDI_Device_Flush>:

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d1e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <USB_DeviceState>
 d22:	24 30       	cpi	r18, 0x04	; 4
 d24:	89 f4       	brne	.+34     	; 0xd48 <MIDI_Device_Flush+0x2a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d26:	fc 01       	movw	r30, r24
 d28:	81 81       	ldd	r24, Z+1	; 0x01
 d2a:	8f 70       	andi	r24, 0x0F	; 15
 d2c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 d30:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 d34:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 d38:	89 2b       	or	r24, r25
 d3a:	41 f0       	breq	.+16     	; 0xd4c <MIDI_Device_Flush+0x2e>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d40:	8e 77       	andi	r24, 0x7E	; 126
 d42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d46:	ea cc       	rjmp	.-1580   	; 0x71c <Endpoint_WaitUntilReady>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d48:	82 e0       	ldi	r24, 0x02	; 2
 d4a:	08 95       	ret
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 d4c:	80 e0       	ldi	r24, 0x00	; 0
}
 d4e:	08 95       	ret

00000d50 <MIDI_Device_USBTask>:
{
 d50:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d52:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_DeviceState>
 d56:	84 30       	cpi	r24, 0x04	; 4
 d58:	51 f4       	brne	.+20     	; 0xd6e <MIDI_Device_USBTask+0x1e>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d5a:	91 81       	ldd	r25, Z+1	; 0x01
 d5c:	9f 70       	andi	r25, 0x0F	; 15
 d5e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsINReady())
 d66:	80 ff       	sbrs	r24, 0
 d68:	02 c0       	rjmp	.+4      	; 0xd6e <MIDI_Device_USBTask+0x1e>
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 d6a:	cf 01       	movw	r24, r30
 d6c:	d8 cf       	rjmp	.-80     	; 0xd1e <MIDI_Device_Flush>
}
 d6e:	08 95       	ret

00000d70 <MIDI_Device_ReceiveEventPacket>:

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 d70:	9b 01       	movw	r18, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d72:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <USB_DeviceState>
 d76:	44 30       	cpi	r20, 0x04	; 4
 d78:	11 f0       	breq	.+4      	; 0xd7e <MIDI_Device_ReceiveEventPacket+0xe>
	  return false;
 d7a:	80 e0       	ldi	r24, 0x00	; 0
 d7c:	08 95       	ret
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d7e:	fc 01       	movw	r30, r24
 d80:	96 81       	ldd	r25, Z+6	; 0x06
 d82:	9f 70       	andi	r25, 0x0F	; 15
 d84:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsOUTReceived()))
 d8c:	82 ff       	sbrs	r24, 2
 d8e:	f5 cf       	rjmp	.-22     	; 0xd7a <MIDI_Device_ReceiveEventPacket+0xa>
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		return false;

	if (!(Endpoint_IsReadWriteAllowed()))
 d94:	85 ff       	sbrs	r24, 5
 d96:	f1 cf       	rjmp	.-30     	; 0xd7a <MIDI_Device_ReceiveEventPacket+0xa>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 d98:	50 e0       	ldi	r21, 0x00	; 0
 d9a:	40 e0       	ldi	r20, 0x00	; 0
 d9c:	64 e0       	ldi	r22, 0x04	; 4
 d9e:	70 e0       	ldi	r23, 0x00	; 0
 da0:	c9 01       	movw	r24, r18
 da2:	22 db       	rcall	.-2492   	; 0x3e8 <Endpoint_Read_Stream_LE>
 da4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (!(Endpoint_IsReadWriteAllowed()))
 da8:	85 fd       	sbrc	r24, 5
 daa:	05 c0       	rjmp	.+10     	; 0xdb6 <MIDI_Device_ReceiveEventPacket+0x46>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 db0:	8b 77       	andi	r24, 0x7B	; 123
 db2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  Endpoint_ClearOUT();

	return true;
 db6:	81 e0       	ldi	r24, 0x01	; 1
}
 db8:	08 95       	ret

00000dba <_exit>:
 dba:	f8 94       	cli

00000dbc <__stop_program>:
 dbc:	ff cf       	rjmp	.-2      	; 0xdbc <__stop_program>
